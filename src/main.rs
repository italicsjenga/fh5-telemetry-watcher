use clap::Parser;

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    #[clap(short, long, default_value = "")]
    folder: String,
}

use serde::{Deserialize, Serialize};
#[derive(Serialize, Deserialize, Debug)]
struct Telemetry {
    isRaceOn: bool,
    timeStampMS: u64,
    engineMaxRpm: f32,
    engineIdleRpm: f32,
    currentEngineRpm: f32,
    accelerationX: f32,
    accelerationY: f32,
    accelerationZ: f32,
    velocityX: f32,
    velocityY: f32,
    velocityZ: f32,
    angularVelocityX: f32,
    angularVelocityY: f32,
    angularVelocityZ: f32,
    yaw: f32,
    pitch: f32,
    roll: f32,
    normalizedSuspensionTravelFrontLeft: f32,
    normalizedSuspensionTravelFrontRight: f32,
    normalizedSuspensionTravelRearLeft: f32,
    normalizedSuspensionTravelRearRight: f32,
    tireSlipRatioFrontLeft: f32,
    tireSlipRatioFrontRight: f32,
    tireSlipRatioRearLeft: f32,
    tireSlipRatioRearRight: f32,
    wheelRotationSpeedFrontLeft: f32,
    wheelRotationSpeedFrontRight: f32,
    wheelRotationSpeedRearLeft: f32,
    wheelRotationSpeedRearRight: f32,
    wheelOnRumbleStripFrontLeft: i32,
    wheelOnRumbleStripFrontRight: i32,
    wheelOnRumbleStripRearLeft: i32,
    wheelOnRumbleStripRearRight: i32,
    wheelInPuddleDepthFrontLeft: f32,
    wheelInPuddleDepthFrontRight: f32,
    wheelInPuddleDepthRearLeft: f32,
    wheelInPuddleDepthRearRight: f32,
    surfaceRumbleFrontLeft: f32,
    surfaceRumbleFrontRight: f32,
    surfaceRumbleRearLeft: f32,
    surfaceRumbleRearRight: f32,
    tireSlipAngleFrontLeft: f32,
    tireSlipAngleFrontRight: f32,
    tireSlipAngleRearLeft: f32,
    tireSlipAngleRearRight: f32,
    tireCombinedSlipFrontLeft: f32,
    tireCombinedSlipFrontRight: f32,
    tireCombinedSlipRearLeft: f32,
    tireCombinedSlipRearRight: f32,
    suspensionTravelMetersFrontLeft: f32,
    suspensionTravelMetersFrontRight: f32,
    suspensionTravelMetersRearLeft: f32,
    suspensionTravelMetersRearRight: f32,
    carClass: i32,
    carPerformanceIndex: i32,
    drivetrai32ype: i32,
    numCylinders: i32,
    carType: i32,
    unknown1: i8,
    unknown2: i8,
    unknown3: i8,
    unknown4: i8,
    unknown5: i8,
    unknown6: i8,
    unknown7: i8,
    unknown8: i8,
    carOrdinal: i32,
    positionX: f32,
    positionY: f32,
    positionZ: f32,
    speed: f32,
    power: f32,
    torque: f32,
    tireTempFrontLeft: f32,
    tireTempFrontRight: f32,
    tireTempRearLeft: f32,
    tireTempRearRight: f32,
    boost: f32,
    fuel: f32,
    distanceTraveled: f32,
    bestLap: f32,
    lastLap: f32,
    currentLap: f32,
    currentRaceTime: f32,
    lapNumber: i16,
    racePosition: i8,
    accel: i8,
    brake: i8,
    clutch: i8,
    handbrake: i8,
    gear: i8,
    steer: i8,
    normalizedDrivingLine: i8,
    normalizedAIBrakeDifference: i8,
}

fn main() {
    let args = Args::parse();

    println!("Folder: {}", args.folder);
}
